generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String              @id @default(uuid())
  name              String
  role              ROLE                @default(user)
  username          String?             @unique
  email             String              @unique
  emailVerified     DateTime?
  access            Boolean             @default(true)
  image             String?
  hashedPassword    String?
  accounts          Account[]
  sessions          Session[]
  authenticator     Authenticator[]
  verificationToken VerificationToken[]
  post              Post[]
  vote              Vote[]
  comment           Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ROLE {
  user
  superAdmin
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(uuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  token   String
  expires DateTime

  @@unique([token])
}

model Authenticator {
  credentialID         String  @id
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Post {
  id            String    @id @default(uuid())
  title         String
  tags          Tag[]     @relation("PostTags")
  slug          String    @unique
  description   String
  viewCount     Int       @default(0)
  commentCount  Int       @default(0)
  upVoteCount   Int       @default(0)
  downVoteCount Int       @default(0)
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  votes         Vote[]    @relation("PostVotes")
  comments      Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  posts     Post[]   @relation("PostTags")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id        String      @id @default(uuid())
  authorId  String
  author    User        @relation(fields: [authorId], references: [id])
  postId    String?
  post      Post?       @relation("PostVotes", fields: [postId], references: [id])
  commentId String?
  comment   Comment?    @relation("CommentVotes", fields: [commentId], references: [id])
  status    VOTE_STATUS
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum VOTE_STATUS {
  upVote
  downVote
}

model Comment {
  id              String    @id @default(uuid())
  authorId        String
  author          User      @relation(fields: [authorId], references: [id])
  postId          String
  post            Post      @relation(fields: [postId], references: [id])
  upVoteCount     Int       @default(0)
  downVoteCount   Int       @default(0)
  votes           Vote[]    @relation("CommentVotes")
  replies         Comment[] @relation("CommentReplies")
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
